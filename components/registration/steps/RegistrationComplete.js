"use client";
import { useState, useEffect } from 'react';
import PartyPopperEffect from '../effects/PartyPopperEffect';
import SuccessHeader from '../components/SuccessHeader';
import SummaryCards from '../components/SummaryCards';
import ActionButtons from '../components/ActionButtons';
import DetailedSummary from '../components/DetailedSummary';
import ConfirmationModal from '../components/ConfirmationModal';

export default function RegistrationComplete({ data, updateData }) {
  const [showDetails, setShowDetails] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submissionResult, setSubmissionResult] = useState(null);
  const [submissionError, setSubmissionError] = useState(null);
  const [authData, setAuthData] = useState(null);
  const [showPartyPopper, setShowPartyPopper] = useState(false);

  // Trigger party popper effect when registration is submitted successfully
  useEffect(() => {
    if (submissionResult && !showPartyPopper) {
      setShowPartyPopper(true);
    }
  }, [submissionResult]);

  // Generate PDF content
  const generatePDF = async () => {
    setIsDownloading(true);
    
    try {
      // Create PDF content
      const pdfContent = `
        MOVESURE REGISTRATION SUMMARY
        ============================
        
        Registration Date: ${new Date().toLocaleDateString()}
        
        COMPANY INFORMATION
        -------------------
        Company Name: ${data.company?.name || 'N/A'}
        Registration Number: ${data.company?.registrationNumber || 'N/A'}
        GST Number: ${data.company?.gstNumber || 'N/A'}
        PAN Number: ${data.company?.panNumber || 'N/A'}
        Email: ${data.company?.email || 'N/A'}
        Phone: ${data.company?.phone || 'N/A'}
        Website: ${data.company?.website || 'N/A'}
        
        Address: ${data.company?.address || 'N/A'}
        City: ${data.company?.city || 'N/A'}
        State: ${data.company?.state || 'N/A'}
        Pincode: ${data.company?.pincode || 'N/A'}
        Country: ${data.company?.country || 'N/A'}
        
        Description: ${data.company?.description || 'N/A'}
        
        ADMIN DETAILS
        -------------
        Name: ${data.owner?.firstName || ''} ${data.owner?.middleName || ''} ${data.owner?.lastName || ''}
        Email: ${data.owner?.email || 'N/A'}
        Phone: ${data.owner?.phone || 'N/A'}
        Username: ${data.owner?.username || 'N/A'}
        Date of Birth: ${data.owner?.dateOfBirth || 'N/A'}
        Gender: ${data.owner?.gender || 'N/A'}
        
        Address: ${data.owner?.address || 'N/A'}
        City: ${data.owner?.city || 'N/A'}
        State: ${data.owner?.state || 'N/A'}
        Pincode: ${data.owner?.pincode || 'N/A'}
        
        Aadhaar: ${data.owner?.aadhaarNumber || 'N/A'}
        PAN: ${data.owner?.panNumber || 'N/A'}
        
        Emergency Contact: ${data.owner?.emergencyContactName || 'N/A'}
        Emergency Phone: ${data.owner?.emergencyContactPhone || 'N/A'}
        
        BUSINESS CATEGORY
        ----------------
        Industry: ${data.industry || 'N/A'}
        Category: ${data.category || 'N/A'}
        
        BRANCHES (${data.branches?.length || 0})
        --------
        ${data.branches?.map((branch, index) => `
        Branch ${index + 1}:
        - Name: ${branch.name || 'N/A'}
        - Code: ${branch.code || 'N/A'}
        - Address: ${branch.address || 'N/A'}
        - City: ${branch.city || 'N/A'}, ${branch.state || 'N/A'}
        - Phone: ${branch.phone || 'N/A'}
        - Email: ${branch.email || 'N/A'}
        - Head Office: ${branch.is_head_office ? 'Yes' : 'No'}
        - Active: ${branch.is_active ? 'Yes' : 'No'}
        `).join('\n') || 'No branches added'}
        
        STAFF MEMBERS (${data.staff?.length || 0})
        -------------
        ${data.staff?.map((member, index) => `
        Staff ${index + 1}:
        - Name: ${member.first_name || ''} ${member.last_name || ''}
        - Email: ${member.email || 'N/A'}
        - Phone: ${member.phone || 'N/A'}
        - Role: ${member.role || 'N/A'}
        - Department: ${member.department || 'N/A'}
        - Designation: ${member.designation || 'N/A'}
        `).join('\n') || 'No staff members added'}
        
        PREFERENCES
        -----------
        Language: ${data.language || 'English'}
        Theme: ${data.theme || 'Light'}
        
        ============================
        Generated by MOVESURE Registration System
        ${new Date().toISOString()}
      `;

      // Create and download the file
      const blob = new Blob([pdfContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `MOVESURE_Registration_${data.company?.name?.replace(/[^a-zA-Z0-9]/g, '_') || 'Company'}_${new Date().getTime()}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating download file. Please try again.');
    } finally {
      setIsDownloading(false);
    }
  };

  // Submit registration to Supabase
  const submitRegistration = async () => {
    setIsSubmitting(true);
    setSubmissionError(null);

    try {
      console.log('Submitting registration data:', data);
      
      const response = await fetch('/api/register/complete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Device-ID': `web-${Date.now()}`,
          'X-Device-Name': 'Web Browser'
        },
        body: JSON.stringify(data)
      });

      console.log('Response status:', response.status);

      // Check if response is JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const textResponse = await response.text();
        console.error('Non-JSON response:', textResponse);
        throw new Error('Server returned invalid response format. Please check server logs.');
      }

      const result = await response.json();
      console.log('API Response:', result);

      if (!response.ok) {
        throw new Error(result.error || `Registration failed with status ${response.status}`);
      }

      if (result.success) {
        setSubmissionResult(result);
        
        // Store auth data if auto-login successful
        if (result.auth) {
          setAuthData(result.auth);
          
          // Store tokens with consistent key names
          localStorage.setItem('movesure_access_token', result.auth.token);
          localStorage.setItem('movesure_refresh_token', result.auth.refreshToken);
          localStorage.setItem('movesure_session_token', result.auth.sessionToken);
          localStorage.setItem('movesure_user', JSON.stringify(result.auth.user));
          
          // Clear registration data
          localStorage.removeItem('movesure_registration_form_data');
          localStorage.removeItem('movesure_registration_current_step');
          localStorage.removeItem('movesure_registration_last_saved');
        }
        
        console.log('Registration completed successfully:', result);
      }
    } catch (error) {
      console.error('Registration submission error:', error);
      setSubmissionError(error.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleGoToDashboard = () => {
    setShowConfirmModal(true);
  };

  const confirmGoToDashboard = async () => {
    try {
      // First submit the registration if not already submitted
      if (!submissionResult) {
        await submitRegistration();
      }
      
      // Navigate to dashboard
      window.location.href = '/dashboard';
    } catch (error) {
      // Keep modal open if submission fails
      console.error('Failed to submit registration:', error);
    }
  };

  return (
    <div className="relative min-h-screen">
      {/* Party Popper Effect */}
      <PartyPopperEffect 
        isActive={showPartyPopper} 
        onComplete={() => setShowPartyPopper(false)} 
      />

      {/* Main Content */}
      <div className="space-y-8 relative z-10">
        {/* Success Header */}
        <SuccessHeader isSubmitted={!!submissionResult} />

        {/* Summary Cards */}
        <SummaryCards data={data} isSubmitted={!!submissionResult} />

        {/* Action Buttons */}
        <ActionButtons 
          data={data}
          showDetails={showDetails}
          setShowDetails={setShowDetails}
          isDownloading={isDownloading}
          generatePDF={generatePDF}
          isSubmitting={isSubmitting}
          submitRegistration={submitRegistration}
          submissionResult={submissionResult}
          submissionError={submissionError}
          handleGoToDashboard={handleGoToDashboard}
        />

        {/* Detailed Summary */}
        {showDetails && (
          <DetailedSummary 
            data={data} 
            onClose={() => setShowDetails(false)} 
          />
        )}

        {/* Confirmation Modal */}
        {showConfirmModal && (
          <ConfirmationModal 
            submissionResult={submissionResult}
            isSubmitting={isSubmitting}
            onCancel={() => setShowConfirmModal(false)}
            onConfirm={confirmGoToDashboard}
          />
        )}

        {/* Registration Footer */}
        <div className="mt-16 pt-8 border-t border-gray-200">
          <p className="text-center text-gray-500 text-sm">
            Registration prepared on {new Date().toLocaleDateString()} at {new Date().toLocaleTimeString()}
          </p>
        </div>
      </div>
    </div>
  );
}